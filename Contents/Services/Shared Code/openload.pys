#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Code take from plugin IPTVPlayer: "https://gitlab.com/iptvplayer-for-e2/iptvplayer-for-e2/
# Modified for use with Plex Media Server by Twoure (03/29/17)

import js2py
from aadecode import aadecode

USER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'
RE_NORM = Regex(r'(https?://\w+\.\w+)/\w+/([^/]+)(/.+)?')

def js2py_decode(enc, wid, jscode):
    decoded = ''
    try:
        jscode = """
        var id = "%s"
            , decoded
            , document = {
                getElementById: true
            }
            , window = this;
        %s
        var $ = function(){
            return {
                text: function(a){
                    if(a)
                        decoded = a;
                    else
                        return id;
                },
                ready: function(a){
                    a()
                }
            }
        };
        %s;""" %(enc, wid, jscode)

        context = js2py.EvalJs()
        context.execute(jscode)
        decoded = context.decoded

        if decoded:
            return decoded.strip()
        else:
            Log.Error("* <openload.js2py_decode> - error: js2py didn't return anything, with method 03/29/17")
    except:
        Log.Exception("* <openload.js2py_decode> - error: cannot decode with method 03/29/17 >>>")
    return False

def decode_hiddenUrl(hurls, aalist, page):
    wid = ''
    r = Regex(r'(?s)\(\'\_\'\)\;(.+?)ﾟωﾟﾉ= /｀ｍ´）ﾉ').search(page)
    if not r:
        Log.Error("* <openload.decode_hiddenUrl> - error: cannot find jscode in page, with method 03/29/17 >>>")
        return False
    jscode = r.group(1)

    for a in aalist:
        try:
            wid += aadecode(a)
        except:
            Log.Exception("* Cannot aadecode window.r id >>>")

    for (hid, k) in hurls:
        if " " in k:
            continue
        dec = js2py_decode(k, wid, jscode)
        if dec:
            return dec
    return False

def OpenloadStreamFromURL(url, http_headers=None):
    if not http_headers:
        http_headers = {'User-Agnet': USER_AGENT, 'Referer': url}

    base = RE_NORM.search(url)
    eurl = base.group(1) + '/embed/' + base.group(2) + (base.group(3) if base.group(3) else '')

    try:
        page = HTTP.Request(eurl, encoding=('utf-8'), headers=http_headers, cacheTime=CACHE_1MINUTE).content
    except UnicodeDecodeError, ude:
        Log.Warn(u"* Warning: Content removed by Openload for '{0}'".format(eurl))
        Log(str(ude))
        return False
    except:
        Log(u"* Error handling '{0}' >>>".format(eurl))
        Log.Exception(u"* Error: Cannot Open/Decode Openload page >>>")
        return False

    html = HTML.ElementFromString(page)
    hiddenUrls = html.xpath('//span[@id]')
    aadata_list = Regex(r'(?s)<script type="text/javascript">(ﾟωﾟ.*?)</script>').findall(page)
    if hiddenUrls:
        hurl = decode_hiddenUrl([(h.get('id'), h.text) for h in hiddenUrls], aadata_list, page)
        if hurl:
            return u'https://openload.co/stream/{0}?mime=true'.format(hurl)
        else:
            Log.Error(u'* Cannot directly decode hiddenUrl.')
    else:
        Log.Warn(u'* No hiddenUrl to decode.')
    return False
