#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# js2py method from:
#   plugin IPTVPlayer: https://gitlab.com/iptvplayer-for-e2/iptvplayer-for-e2/
# direct and api method from:
#   streamondemand: https://github.com/streamondemand/plugin.video.streamondemand/blob/master/servers/openload.py
#
# Edited by:    Twoure
# Edit Date:    04/23/17

import js2py
from aadecode import aadecode
from operator import ixor

USER_AGENT = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36'
RE_NORM = Regex(r'(https?://\w+\.\w+)/\w+/([^/]+)(/.+)?')

def link_from_api(fid):
    l = 'OTdiMjMyNmQ3ZGI4MWYwZg__'
    k = 'QVFGTzNRSlE_'
    burl = 'aHR0cHM6Ly9hcGkub3BlbmxvYWQuY28vMS9maWxlLw__'
    api1 = 'e31kbHRpY2tldD9maWxlPXt9JmxvZ2luPXt9JmtleT17fQ__'
    api2 = 'e31kbD9maWxlPXt9JnRpY2tldD17fQ__'

    try:
        data = JSON.ObjectFromURL(D(api1).format(D(burl), fid, D(l), D(k)), cacheTime=CACHE_1HOUR*5)
    except:
        Log.Exception(u"* <openload.link_from_api> - error: cannot handle first api link >>>")
        return False

    if (data["status"] == 200):
        t = data["result"]["ticket"]
        try:
            data = JSON.ObjectFromURL(D(api2).format(D(burl), fid, t), cacheTime=CACHE_1HOUR*5)
            return (data['result']['url']).replace("https", "http")
        except:
            Log.Exception(u"* <openload.link_from_api> - error: cannot handle 2nd api link >>>")
    Log.Error("* <openload.link_from_api> - error: failed to retrieve video stream")
    return False

def direct_decode(encode, numeros, ops):
    Log("* <openload.direct_decode> - Trying direct method 04/23/17.")
    text_decode = ""
    try:
        mult = int(ops[0]) * int(ops[1])
        rango1 = encode[:mult]
        decode1 = []
        for i in range(0, len(rango1), 8):
            decode1.append(int(rango1[i:i+8], 16))
        rango1 = encode[mult:]
        j = 0
        i = 0
        while i < len(rango1):
            index1 = 64
            value1 = 0
            value2 = 0
            value3 = 0
            while True:
                if (i + 1) >= len(rango1):
                    index1 = 143
                value3 = int(rango1[i:i+2], 16)
                i += 2
                data = value3 & 63
                value2 += data << value1
                value1 += 6
                if value3 < index1:
                    break

            value4 = value2 ^ decode1[j % (mult/8)]
            for n in numeros:
                if not n.isdigit():
                    n = int(n, 16)
                value4 = ixor(value4, int(n))
            value5 = index1 * 2 + 127
            for h in range(4):
                valorfinal = (value4 >> 8 * h) & (value5)
                valorfinal = chr(valorfinal)
                if valorfinal != "%":
                    text_decode += valorfinal
            j += 1
        return unicode(text_decode)
    except:
        Log.Exception("* <openload.direct_decode> - error[1]: cannot directly decode with method 04/23/17 >>>")
    return False

def js2py_decode(enc, wid, jscode):
    rn = Regex(r'_[A-Fa-f0-9]+x[A-Fa-f0-9]+\s*=\s*([0-9]{4,}|0x[A-Fa-f0-9]{4,});').findall(jscode)
    rops = Regex(r'\(0x(\d),0x(\d)\);').search(jscode)
    ops = rops.groups() if rops else list()
    try:
        jscode = String.Base64Decode(
            'dmFyIGlkID0gIiVzIiwgZGVjb2RlZCwgZG9jdW1lbnQgPSB7IGdldEVsZW1lbnRCeUlkOiB0cnVl'
            'IH0sIHdpbmRvdyA9IHRoaXM7ICVzIHZhciAkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4geyB0ZXh0'
            'OiBmdW5jdGlvbiAoYSkgeyBpZihhKSBkZWNvZGVkID0gYTsgZWxzZSByZXR1cm4gaWQ7IH0sIHJl'
            'YWR5OiBmdW5jdGlvbiAoYSkgeyBhKCkgfSB9IH07ICVzOw=='
            ) %(enc, wid, jscode)

        jscode = Regex(r'if\s*\([^\}]+?typeof[^\}]+?\}').sub('', jscode)
        jscode = Regex(r'if\s*\([^\}]+?document[^\}]+?\}').sub('', jscode)

        context = js2py.EvalJs()
        context.execute(jscode)
        decoded = context.decoded

        if decoded:
            return decoded.strip()
        else:
            Log.Error("* <openload.js2py_decode> - error: js2py didn't return anything, with method 03/31/17")
    except:
        Log.Exception("* <openload.js2py_decode> - error: cannot decode with method 03/31/17 >>>")
    return direct_decode(enc, rn, ops)

def decode_hiddenUrl(hurls, aalist, page):
    wid = ''
    r = Regex(r'(?s)\(\'\_\'\)\;(.+?)ﾟωﾟﾉ= /｀ｍ´）ﾉ').search(page)
    if not r:
        Log.Error("* <openload.decode_hiddenUrl> - error: cannot find jscode in page, with method 03/29/17 >>>")
        return False
    jscode = r.group(1)

    for a in aalist:
        try:
            wid += aadecode(a)
        except:
            Log.Exception("* Cannot aadecode window.r id >>>")

    for (hid, k) in hurls:
        if " " in k:
            continue
        dec = js2py_decode(k, wid, jscode)
        if dec:
            return dec
    return False

def OpenloadStreamFromURL(url, http_headers=None):
    if not http_headers:
        http_headers = {'User-Agnet': USER_AGENT, 'Referer': url}

    base = RE_NORM.search(url)
    eurl = base.group(1) + '/embed/' + base.group(2) + (base.group(3) if base.group(3) else '')

    try:
        page = HTTP.Request(eurl, encoding=('utf-8'), headers=http_headers, cacheTime=CACHE_1MINUTE).content
    except UnicodeDecodeError, ude:
        Log.Warn(u"* Warning: Content removed by Openload for '{0}'".format(eurl))
        Log(str(ude))
        return False
    except:
        Log(u"* Error handling '{0}' >>>".format(eurl))
        Log.Exception(u"* Error: Cannot Open/Decode Openload page >>>")
        return False

    html = HTML.ElementFromString(page)
    hiddenUrls = html.xpath('//span[@id]')
    aadata_list = Regex(r'(?s)<script type="text/javascript">(ﾟωﾟ.*?)</script>').findall(page)
    if hiddenUrls:
        hurl = decode_hiddenUrl([(h.get('id'), h.text) for h in hiddenUrls], aadata_list, page)
        if hurl:
            return u'https://openload.co/stream/{0}?mime=true'.format(hurl)
        else:
            Log.Error(u'* Cannot directly decode hiddenUrl. Trying api method.')
            # Fallback to api method, although at peak times it will not work
            return link_from_api(base.group(2))
    else:
        Log.Warn(u'* No hiddenUrl to decode.')
    return False
